name: Build and Release CyberUI

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '17'

    - name: Locate gradlew and build.gradle
      id: locate_files
      run: |
        GRADLEW_PATH=$(find . -name gradlew | head -n 1)
        BUILD_GRADLE_PATH=$(find . -name build.gradle | head -n 1)
        if [ -z "$GRADLEW_PATH" ]; then
          echo "ERROR: gradlew not found! Please commit gradlew and gradle/wrapper/"
          exit 1
        fi
        if [ -z "$BUILD_GRADLE_PATH" ]; then
          echo "ERROR: build.gradle not found! Make sure itâ€™s in the repository"
          exit 1
        fi
        echo "gradlew_path=$GRADLEW_PATH" >> $GITHUB_OUTPUT
        echo "build_gradle_path=$BUILD_GRADLE_PATH" >> $GITHUB_OUTPUT
        echo "Found gradlew and build.gradle."

    - name: Make gradlew executable
      run: chmod +x ${{ steps.locate_files.outputs.gradlew_path }}

    - name: Build mod
      run: |
        WRAPPER_DIR=$(dirname "${{ steps.locate_files.outputs.gradlew_path }}")
        cd "$WRAPPER_DIR"
        ./gradlew build --stacktrace || { echo "Gradle build failed!"; exit 1; }

    - name: Extract mod version
      id: extract_version
      run: |
        VERSION=$(grep -oP 'version\s*=\s*["'\'']\K[^"'\'' ]+' "${{ steps.locate_files.outputs.build_gradle_path }}")
        if [ -z "$VERSION" ]; then
          echo "ERROR: Could not extract mod version from build.gradle"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected mod version: $VERSION"

    - name: Rename jar for Modrinth
      run: |
        JAR_PATH=$(find . -type f -path "**/build/libs/*.jar" | head -n 1)
        if [ -z "$JAR_PATH" ]; then
          echo "ERROR: No jar found in build/libs!"
          exit 1
        fi
        VERSION=${{ steps.extract_version.outputs.version }}
        NEW_NAME="CyberUI-1.18.2-$VERSION.jar"
        mv "$JAR_PATH" "$NEW_NAME"
        echo "Jar renamed to $NEW_NAME"

    - name: Package jar into zip
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        ZIP_NAME="CyberUI-1.18.2-$VERSION.zip"
        zip -r "$ZIP_NAME" "CyberUI-1.18.2-$VERSION.jar"
        echo "Packaged ZIP: $ZIP_NAME"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: CyberUI-zip
        path: CyberUI-1.18.2-${{ steps.extract_version.outputs.version }}.zip

    - name: Create Git tag
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        name: CyberUI v${{ steps.extract_version.outputs.version }}
        body: "Automated build release for Forge 1.18.2"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload zip to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: CyberUI-1.18.2-${{ steps.extract_version.outputs.version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
